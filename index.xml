<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>altera520 Blog</title><link>https://altera520.github.io/</link><description>altera520 Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 04 Mar 2021 19:19:08 +0900</lastBuildDate><atom:link href="https://altera520.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>객체 지향 5대 원칙 - SOLID</title><link>https://altera520.github.io/posts/2021-03-04-solid/</link><pubDate>Thu, 04 Mar 2021 19:19:08 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-03-04-solid/</guid><description>SOLID란? OOP에서 클래스 안의 응집도(Cohesion)는 높이고 타 클래스 간의 결합도(Coupling)는 낮추는 관점에서 정립된 원칙을 말한다.
SOLID 원칙에 기반하여 소프트웨어를 개발하면 소프트웨어 내부 컴포넌트들은 재사용성이 높아지고 수정이 최소화되기 때문에 보다 유지보수하기 쉽고, 유현하고, 확장이 용이해진다.
SRP 정의 단일책임 원칙이란 클래스는 단 하나의 책임을 가져야하며, 클래스를 변경하는 이유는 단 하나의 이유여야 한다는 원칙이다.</description></item><item><title>자바의 JDBC</title><link>https://altera520.github.io/posts/2021-03-02-jdbc/</link><pubDate>Tue, 02 Mar 2021 04:08:32 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-03-02-jdbc/</guid><description>JDBC 정의 JDBC는 자바 언어를 통해 다양한 DB에 접속하여 SQL문 수행이 가능한 표준 SQL 인터페이스를 말하며 모든 자바의 Data Access 기술의 근간이다.
JDBC Architecture"
JDBC Architecture
JDBC를 사용하지 않는다면, DBMS의 종류가 다양하고 DBMS마다 대응하는 API를 개발해야할 것이다. 이러한 수고로움과 불편함을 덜기위해 모든 DBMS에서 공통적으로 사용가능한 인터페이스와 클래스를 포함한 JDBC API 규격을 정의하였다.</description></item><item><title>JSP (Java Server Pages) 정의</title><link>https://altera520.github.io/posts/2021-02-28-jsp/</link><pubDate>Sun, 28 Feb 2021 23:31:25 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-28-jsp/</guid><description>JSP란? JSP는 HTML에 자바 코드를 삽입하여 동적 컨텐츠를 생성하게 해주는 Server Side의 기술이자 스크립트 언어이다.
Servlet과는 기능적인 측면에서의 차이는 없다. JSP가 서블릿 클래스로 변환되어 서블릿으로서 동작하기 때문이다.
JSP의 동작 과정 JSP의 동작은 변환 단계와 실행 단계로 나뉜다.
변환(Translation): JSP파일을 해석하여 서블릿 소스파일(.java)로 만들고 컴파일하여 서블릿 클래스(.class)를 생성한다. 변환과 컴파일 작업은 최초의 요청이거나 JSP가 변경되었을때만 수행된다.</description></item><item><title>자바 고양이 Tomcat</title><link>https://altera520.github.io/posts/2021-02-23-tomcat/</link><pubDate>Tue, 23 Feb 2021 17:44:34 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-23-tomcat/</guid><description>Web Server와 WAS 정의 Tomcat을 논하기 앞서, 웹 서버(Web Server)와 웹 애플리케이션 서버(Web Application Server)의 차이를 짚고 넘어가고자 한다.
Web Server 소프트웨어 측면에서의 정의는 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠를 제공하는 서버이다.[1] 웹 서버는 요청에 따라 아래의 두 가지중 하나로 기능한다.
정적인 컨텐츠 제공 WAS 거치지 않고 바로 정적 자원 제공 동적인 컨텐츠 제공을 위한 요청 전달 클라이언트의 요청을 WAS에게 전송, WAS가 처리한 결과를 클라이언트에게 응답 대표적인 Web Server는 Apache (httpd), nginx, IIS가 있다.</description></item><item><title>Servlet 정의</title><link>https://altera520.github.io/posts/2021-02-23-servlet/</link><pubDate>Tue, 23 Feb 2021 16:04:49 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-23-servlet/</guid><description>Servlet이란? 클라이언트의 요청을 처리하고 결과를 반환하는, Servlet 클래스의 구현 규칙을 지킨 웹 프로그래밍 표준 기술을 말한다.
모든 서블릿은 javax.servlet.http.HttpServlet 클래스나 javax.servlet.GenericServlet을 상속받아서 구현되어야 하며, 서블릿 객체들은 서블릿 컨테이너에 의해 관리되고 제어되어진다.
Servlet의 동작 Servlet LifeCycle"
Servlet LifeCycle
HTTP 요청에따른 실행 순서 HTTP 요청을 커넥터(Coyote)에서 받고 서블릿 컨테이너(Catalina)로 전달한다.</description></item><item><title>Eclipse, JSP, Servlet 인코딩</title><link>https://altera520.github.io/posts/2021-02-22-eclipse-jsp-servlet-encoding/</link><pubDate>Mon, 22 Feb 2021 13:14:25 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-22-eclipse-jsp-servlet-encoding/</guid><description><![CDATA[인코딩 설정 관련 이클립스 IDE에서의 인코딩 이클립스에서 설정해주는 인코딩 타입은 아래의 경우에서 사용된다.
 파일의 저장 형식 저장된 파일을 읽어서 보여줄 때 사용  여러 사람이 협업하는 상황에서 서로간의 인코딩 설정값이 다르면, 한글같은 2byte 길이의 국가 언어 코드가 깨져보일 수 있다.
 이클립스 인코딩 설정"이클립스 인코딩 설정  window → Preferences에 들어가서 &ldquo;encoding&rdquo; 검색 General → Workspace에 들어가서 &ldquo;Text file encoding&rdquo; 설정에서 타입을 UTF-8로 변경   JSP의 인코딩 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; JSP 파일은 파일 내의 코드에서 자신을 어떤 인코딩 타입으로 저장할지 정한다.]]></description></item><item><title>[Java8의 변경사항] 3. 날짜와 시간 계산</title><link>https://altera520.github.io/posts/2021-02-18-java8-features-3rd/</link><pubDate>Thu, 18 Feb 2021 13:22:25 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-18-java8-features-3rd/</guid><description>자바8 이전의 날짜 클래스 자바8 이전에 사용하던 java.util.Date와 java.util.Calendar 등은 많은 문제점이 존재하였다. 대표적인 문제점을 추리면 다음과 같다.
불변성(Immutable)을 보장하지 않는다. 불변성을 보장하지 않기에 Thread-safe하지 않다. Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.Month, 2 - 1); Date date = new Date(); date.setTime(new Date()); 클래스 이름이 Date인데 시간까지 다룬다. int 상수 필드의 남용 Date와 Calendar의 불편한 역할 분담 Month 계산이 혼동스럽다.</description></item><item><title>[Java8의 변경사항] 2. 스트림(Stream) API</title><link>https://altera520.github.io/posts/2021-02-18-java8-features-2nd/</link><pubDate>Thu, 18 Feb 2021 02:39:19 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-18-java8-features-2nd/</guid><description><![CDATA[스트림 특징 스트림 API는 컬렉션과 같이 연속된 데이터를 처리하는 용도로 사용한다. 저장하는 용도로 사용하는 것이 아니다.
스트림의 특징은 다음과 같다.
  for과 같은 외부반복자와 필터링을 위한 if등을 사용하지 않아 직관적이며 가독성이 좋아진다.
//자바8 이전의 코드 List&lt;String&gt; list = Arrays.asList(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;); Iterator&lt;String&gt; iterator = list.iterator(); while(iterator.hasNext()) { String item = iterator.]]></description></item><item><title>[Java8의 변경사항] 1. 특징 및 람다 표현식</title><link>https://altera520.github.io/posts/2021-02-17-java8-features-1st/</link><pubDate>Wed, 17 Feb 2021 20:22:31 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-17-java8-features-1st/</guid><description>Java8의 특징 자바 8은 2014년 3월에 출시된 LTS 버전이며 제공하는 주요기능은 다음과 같다.
람다 표현식: 함수형 프로그래밍 Stream API: 시퀀셜한 데이터의 추상화된 사용 java.time 패키지: 개선된 Date, Time API 제공 나즈혼(Nashorn): 자바스크립트의 새로운 엔진 도입 LTS(Long-Term-Support) 버전 LTS 버전 배포 주기는 3년이며 지원기간은 5년이상으로서 production환경에서는 LTS 버전을 권장한다.</description></item><item><title>JVM 구조</title><link>https://altera520.github.io/posts/2021-01-12-jvm/</link><pubDate>Tue, 12 Jan 2021 18:47:35 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-12-jvm/</guid><description>JVM 정의 javac를 통해 생성된 Byte Code를 OS에 맞게 해석하여 실행시켜주는 역할을 수행한다. JVM은 크게 봤을 때 5개의 컴포넌트로 나뉜다.
Class Loader Execution Engine Runtime Date Area JNI Native method library 이 5개의 컴포넌트 중 JNI와 Native method library를 제외한 3가지 컴포넌트에 대해 정리하고자 한다.
Java Virtual Machine Architecture (이미지 출처: medium.</description></item></channel></rss>