<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Juneee blog</title><link>https://altera520.github.io/</link><description>Juneee blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 23 Feb 2021 17:44:34 +0900</lastBuildDate><atom:link href="https://altera520.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>자바 고양이 Tomcat</title><link>https://altera520.github.io/posts/2021-02-23-tomcat/</link><pubDate>Tue, 23 Feb 2021 17:44:34 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-23-tomcat/</guid><description>Web Server와 WAS 정의 Tomcat을 논하기 앞서, 웹 서버(Web Server)와 웹 애플리케이션 서버(Web Application Server)의 차이를 짚고 넘어가고자 한다.
Web Server 소프트웨어 측면에서의 정의는 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠를 제공하는 서버이다.[1] 웹 서버는 요청에 따라 아래의 두 가지중 하나로 기능한다.
정적인 컨텐츠 제공 WAS 거치지 않고 바로 정적 자원 제공 동적인 컨텐츠 제공을 위한 요청 전달 클라이언트의 요청을 WAS에게 전송, WAS가 처리한 결과를 클라이언트에게 응답 대표적인 Web Server는 Apache (httpd), nginx, IIS가 있다.</description></item><item><title>Servlet 정의</title><link>https://altera520.github.io/posts/2021-02-23-servlet/</link><pubDate>Tue, 23 Feb 2021 16:04:49 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-23-servlet/</guid><description>Servlet이란? 클라이언트의 요청을 처리하고 결과를 반환하는, Servlet 클래스의 구현 규칙을 지킨 웹 프로그래밍 표준 기술을 말한다.
모든 서블릿은 javax.servlet.http.HttpServlet 클래스를 상속받아야 하며, 서블릿 객체들은 서블릿 컨테이너에 의해 관리되고 제어되어진다.
Servlet의 동작 Servlet LifeCycle" Servlet LifeCycle HTTP 요청에따른 실행 순서
HTTP 요청을 Coyote에서 받고 Catalina(서블릿 컨테이너)로 전달한다. Catalina는 전달받은 HTTP 요청을 처리할 Context(웹 애플리케이션)를 찾고, Context에 대응되는 deployment descriptor file(web.</description></item><item><title>Eclipse, JSP, Servlet 인코딩</title><link>https://altera520.github.io/posts/2021-02-22-eclipse-jsp-servlet-encoding/</link><pubDate>Mon, 22 Feb 2021 13:14:25 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-22-eclipse-jsp-servlet-encoding/</guid><description><![CDATA[인코딩 설정 관련 이클립스 IDE에서의 인코딩 이클립스에서 설정해주는 인코딩 타입은 아래의 경우에서 사용된다.
 파일의 저장 형식 저장된 파일을 읽어서 보여줄 때 사용  여러 사람이 협업하는 상황에서 서로간의 인코딩 설정값이 다르면, 한글같은 2byte 길이의 국가 언어 코드가 깨져보일 수 있다.
 이클립스 인코딩 설정" 이클립스 인코딩 설정   window → Preferences에 들어가서 &ldquo;encoding&rdquo; 검색 General → Workspace에 들어가서 &ldquo;Text file encoding&rdquo; 설정에서 타입을 UTF-8로 변경   JSP의 인코딩 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; JSP 파일은 파일 내의 코드에서 자신을 어떤 인코딩 타입으로 저장할지 정한다.]]></description></item><item><title>[Java8의 변경사항] 3. 날짜와 시간 계산</title><link>https://altera520.github.io/posts/2021-02-18-java8-features-3rd/</link><pubDate>Thu, 18 Feb 2021 13:22:25 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-18-java8-features-3rd/</guid><description>자바8 이전의 날짜 클래스 자바8 이전에 사용하던 java.util.Date와 java.util.Calendar 등은 많은 문제점이 존재하였다. 대표적인 문제점을 추리면 다음과 같다.
불변성(Immutable)을 보장하지 않는다. 불변성을 보장하지 않기에 Thread-safe하지 않다. Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.Month, 2 - 1); Date date = new Date(); date.setTime(new Date()); 클래스 이름이 Date인데 시간까지 다룬다. int 상수 필드의 남용 Date와 Calendar의 불편한 역할 분담 Month 계산이 혼동스럽다.</description></item><item><title>[Java8의 변경사항] 2. 스트림(Stream) API</title><link>https://altera520.github.io/posts/2021-02-18-java8-features-2nd/</link><pubDate>Thu, 18 Feb 2021 02:39:19 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-18-java8-features-2nd/</guid><description><![CDATA[스트림 특징 스트림 API는 컬렉션과 같이 연속된 데이터를 처리하는 용도로 사용한다. 저장하는 용도로 사용하는 것이 아니다.
스트림의 특징은 다음과 같다.
  for과 같은 외부반복자와 필터링을 위한 if등을 사용하지 않아 직관적이며 가독성이 좋아진다.
//자바8 이전의 코드 List&lt;String&gt; list = Arrays.asList(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;); Iterator&lt;String&gt; iterator = list.iterator(); while(iterator.hasNext()) { String item = iterator.]]></description></item><item><title>[Java8의 변경사항] 1. 특징 및 람다 표현식</title><link>https://altera520.github.io/posts/2021-02-17-java8-features-1st/</link><pubDate>Wed, 17 Feb 2021 20:22:31 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-17-java8-features-1st/</guid><description>Java8의 특징 자바 8은 2014년 3월에 출시된 LTS 버전이며 제공하는 주요기능은 다음과 같다.
람다 표현식: 함수형 프로그래밍 Stream API: 시퀀셜한 데이터의 추상화된 사용 java.time 패키지: 개선된 Date, Time API 제공 나즈혼(Nashorn): 자바스크립트의 새로운 엔진 도입 LTS(Long-Term-Support) 버전 LTS 버전 배포 주기는 3년이며 지원기간은 5년이상으로서 production환경에서는 LTS 버전을 권장한다.</description></item><item><title>JVM 구조</title><link>https://altera520.github.io/posts/2021-01-12-jvm/</link><pubDate>Tue, 12 Jan 2021 18:47:35 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-12-jvm/</guid><description>JVM 정의 javac를 통해 생성된 Byte Code를 OS에 맞게 해석하여 실행시켜주는 역할을 수행한다. JVM은 크게 봤을 때 5개의 컴포넌트로 나뉜다.
Class Loader Execution Engine Runtime Date Area JNI Native method library 이 5개의 컴포넌트 중 JNI와 Native method library를 제외한 3가지 컴포넌트에 대해 정리하고자 한다.
Java Virtual Machine Architecture (이미지 출처: medium.</description></item><item><title>싱글턴(Singleton)</title><link>https://altera520.github.io/posts/2021-01-06-singleton/</link><pubDate>Wed, 06 Jan 2021 16:00:13 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-06-singleton/</guid><description>싱글턴 정의 GoF 디자인 패턴에서 생성 패턴으로 분류된다. 클래스에 대한 인스턴스가 오직 1개만 생성되어야 하는 경우에 사용하는 패턴이다.
다중 스레드 환경이라면 싱글턴을 설계할 때 동시성(concurrency) 을 필히 고려하여 Thread-safe하게 만들어야한다. 다중 스레드 환경에서 동시성을 고려하지않고 싱글턴 클래스를 설계하면 인스턴스가 2개이상 생성될 수 있기에 예기치 못한 동작을 일으킬 수 있다.
싱글턴 패턴 구현 방식 Thread-safe한 구현방식에는 차이가 있어도 private constructor와 static method를 사용하는 것은 공통이다.</description></item><item><title>KMP : 문자열 매칭 알고리즘</title><link>https://altera520.github.io/posts/2021-01-01-kmp/</link><pubDate>Fri, 01 Jan 2021 14:26:28 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-01-kmp/</guid><description>KMP 정의 텍스트 내에서 특정 패턴을 검색하는데 사용하는 알고리즘이다.
예시로 워드나 브라우저등에서 Ctrl + F 키를 눌러 단어를 찾는 기능에 적용 가능하다. 텍스트 길이를 n, 패턴 길이를 m이라고 했을 때 brute-force로 수행하면 텍스트의 각 인덱스마다 패턴 길이만큼 반복을하여 $O(nm)$이 소요된다.
KMP는 검색 효율을 높이기 위해 텍스트와 패턴의 구성 문자들을 비교해나가다가 불일치가 발생하면, 이전까지 일치했던 패턴의 부분 문자열내에서 접두사와 접미사가 일치한 길이로 패턴의 인덱스를 변경한 후 불일치한 부분과 다시 비교해나간다.</description></item><item><title>백트래킹 (Back Tracking)</title><link>https://altera520.github.io/posts/2020-12-31-back_tracking/</link><pubDate>Thu, 31 Dec 2020 11:27:53 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2020-12-31-back_tracking/</guid><description>백트래킹 일반적으로 DFS나 BFS를 사용하여 탐색을 수행하면 모든 노드들을 탐색한다. 모든 노드를 탐색해야만하는 상황이라면 이러한 완전탐색(Full-Access) 방법을 취하는 것은 적절하다. 하지만, 모든 노드 중 특정 조건이 성립하는 노드만을 탐색하길 원한다면 DFS나 BFS는 목표하지 않은 경로도 탐색하게되므로 비효율적인 결과를 발생시킬수 있다.
백트래킹을 적용하면 유망성 검사를 통해 모든 노드를 탐색하는 것이 아닌 조건에 부합하지 않는 노드들은 배제를 시킨다.</description></item></channel></rss>