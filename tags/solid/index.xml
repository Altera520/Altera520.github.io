<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SOLID - Tag - altera520 Blog</title><link>https://altera520.github.io/tags/solid/</link><description>SOLID - Tag - altera520 Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 04 Mar 2021 19:19:08 +0900</lastBuildDate><atom:link href="https://altera520.github.io/tags/solid/" rel="self" type="application/rss+xml"/><item><title>객체 지향 5대 원칙 - SOLID</title><link>https://altera520.github.io/posts/2021-03-04-solid/</link><pubDate>Thu, 04 Mar 2021 19:19:08 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-03-04-solid/</guid><description>SOLID란? OOP에서 클래스 안의 응집도(Cohesion)는 높이고 타 클래스 간의 결합도(Coupling)는 낮추는 관점에서 정립된 원칙을 말한다.
SOLID 원칙에 기반하여 소프트웨어를 개발하면 소프트웨어 내부 컴포넌트들은 재사용성이 높아지고 수정이 최소화되기 때문에 보다 유지보수하기 쉽고, 유현하고, 확장이 용이해진다.
SRP 정의 단일책임 원칙이란 클래스는 단 하나의 책임을 가져야하며, 클래스를 변경하는 이유는 단 하나의 이유여야 한다는 원칙이다.</description></item></channel></rss>