<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Java - Tag - Juneee blog</title><link>https://altera520.github.io/tags/java/</link><description>Java - Tag - Juneee blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 18 Feb 2021 13:22:25 +0900</lastBuildDate><atom:link href="https://altera520.github.io/tags/java/" rel="self" type="application/rss+xml"/><item><title>[Java8의 변경사항] 3. 날짜와 시간 계산</title><link>https://altera520.github.io/posts/2021-02-18-java8-features-3rd/</link><pubDate>Thu, 18 Feb 2021 13:22:25 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-18-java8-features-3rd/</guid><description>자바8 이전의 날짜 클래스 자바8 이전에 사용하던 java.util.Date와 java.util.Calendar 등은 많은 문제점이 존재하였다. 대표적인 문제점을 추리면 다음과 같다.
불변성(Immutable)을 보장하지 않는다. 불변성을 보장하지 않기에 Thread-safe하지 않다. Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.Month, 2 - 1); Date date = new Date(); date.setTime(new Date()); 클래스 이름이 Date인데 시간까지 다룬다. int 상수 필드의 남용 Date와 Calendar의 불편한 역할 분담 Month 계산이 혼동스럽다.</description></item><item><title>[Java8의 변경사항] 2. 스트림(Stream) API</title><link>https://altera520.github.io/posts/2021-02-18-java8-features-2nd/</link><pubDate>Thu, 18 Feb 2021 02:39:19 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-18-java8-features-2nd/</guid><description><![CDATA[스트림 특징 스트림 API는 컬렉션과 같이 연속된 데이터를 처리하는 용도로 사용한다. 저장하는 용도로 사용하는 것이 아니다.
스트림의 특징은 다음과 같다.
  for과 같은 외부반복자와 필터링을 위한 if등을 사용하지 않아 직관적이며 가독성이 좋아진다.
//자바8 이전의 코드 List&lt;String&gt; list = Arrays.asList(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;); Iterator&lt;String&gt; iterator = list.iterator(); while(iterator.hasNext()) { String item = iterator.]]></description></item><item><title>[Java8의 변경사항] 1. 특징 및 람다 표현식</title><link>https://altera520.github.io/posts/2021-02-17-java8-features-1st/</link><pubDate>Wed, 17 Feb 2021 20:22:31 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-02-17-java8-features-1st/</guid><description>Java8의 특징 자바 8은 2014년 3월에 출시된 LTS 버전이며 제공하는 주요기능은 다음과 같다.
람다 표현식: 함수형 프로그래밍 Stream API: 시퀀셜한 데이터의 추상화된 사용 java.time 패키지: 개선된 Date, Time API 제공 나즈혼(Nashorn): 자바스크립트의 새로운 엔진 도입 LTS(Long-Term-Support) 버전 LTS 버전 배포 주기는 3년이며 지원기간은 5년이상으로서 production환경에서는 LTS 버전을 권장한다.</description></item><item><title>JVM 구조</title><link>https://altera520.github.io/posts/2021-01-12-jvm/</link><pubDate>Tue, 12 Jan 2021 18:47:35 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-12-jvm/</guid><description>JVM 정의 javac를 통해 생성된 Byte Code를 OS에 맞게 해석하여 실행시켜주는 역할을 수행한다. JVM은 크게 봤을 때 5개의 컴포넌트로 나뉜다.
Class Loader Execution Engine Runtime Date Area JNI Native method library 이 5개의 컴포넌트 중 JNI와 Native method library를 제외한 3가지 컴포넌트에 대해 정리하고자 한다.
Java Virtual Machine Architecture (이미지 출처: medium.</description></item><item><title>싱글턴(Singleton)</title><link>https://altera520.github.io/posts/2021-01-06-singleton/</link><pubDate>Wed, 06 Jan 2021 16:00:13 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-06-singleton/</guid><description>싱글턴 정의 GoF 디자인 패턴에서 생성 패턴으로 분류된다. 클래스에 대한 인스턴스가 오직 1개만 생성되어야 하는 경우에 사용하는 패턴이다.
다중 스레드 환경이라면 싱글턴을 설계할 때 동시성(concurrency) 을 필히 고려하여 Thread-safe하게 만들어야한다. 다중 스레드 환경에서 동시성을 고려하지않고 싱글턴 클래스를 설계하면 인스턴스가 2개이상 생성될 수 있기에 예기치 못한 동작을 일으킬 수 있다.
싱글턴 패턴 구현 방식 Thread-safe한 구현방식에는 차이가 있어도 private constructor와 static method를 사용하는 것은 공통이다.</description></item></channel></rss>