<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Spring - Tag - altera520 Blog</title><link>https://altera520.github.io/tags/spring/</link><description>Spring - Tag - altera520 Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 06 Jan 2021 16:00:13 +0900</lastBuildDate><atom:link href="https://altera520.github.io/tags/spring/" rel="self" type="application/rss+xml"/><item><title>싱글턴(Singleton)</title><link>https://altera520.github.io/posts/2021-01-06-singleton/</link><pubDate>Wed, 06 Jan 2021 16:00:13 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-06-singleton/</guid><description>싱글턴 정의 GoF 디자인 패턴에서 생성 패턴으로 분류된다. 클래스에 대한 인스턴스가 오직 1개만 생성되어야 하는 경우에 사용하는 패턴이다.
다중 스레드 환경이라면 싱글턴을 설계할 때 동시성(concurrency) 을 필히 고려하여 Thread-safe하게 만들어야한다. 다중 스레드 환경에서 동시성을 고려하지않고 싱글턴 클래스를 설계하면 인스턴스가 2개이상 생성될 수 있기에 예기치 못한 동작을 일으킬 수 있다.
싱글턴 패턴 구현 방식 Thread-safe한 구현방식에는 차이가 있어도 private constructor와 static method를 사용하는 것은 공통이다.</description></item></channel></rss>