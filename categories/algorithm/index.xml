<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Algorithm - Category - Juneee blog</title><link>https://altera520.github.io/categories/algorithm/</link><description>Algorithm - Category - Juneee blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 01 Jan 2021 14:26:28 +0900</lastBuildDate><atom:link href="https://altera520.github.io/categories/algorithm/" rel="self" type="application/rss+xml"/><item><title>KMP : 문자열 매칭 알고리즘</title><link>https://altera520.github.io/posts/2021-01-01-kmp/</link><pubDate>Fri, 01 Jan 2021 14:26:28 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-01-kmp/</guid><description>KMP 정의 텍스트 내에서 특정 패턴을 검색하는데 사용하는 알고리즘이다.
예시로 워드나 브라우저등에서 Ctrl + F 키를 눌러 단어를 찾는 기능에 적용 가능하다. 텍스트 길이를 n, 패턴 길이를 m이라고 했을 때 brute-force로 수행하면 텍스트의 각 인덱스마다 패턴 길이만큼 반복을하여 $O(nm)$이 소요된다.
KMP는 검색 효율을 높이기 위해 텍스트와 패턴의 구성 문자들을 비교해나가다가 불일치가 발생하면, 이전까지 일치했던 패턴의 부분 문자열내에서 접두사와 접미사가 일치한 길이로 패턴의 인덱스를 변경한 후 불일치한 부분과 다시 비교해나간다.</description></item><item><title>백트래킹 (Back Tracking)</title><link>https://altera520.github.io/posts/2020-12-31-back_tracking/</link><pubDate>Thu, 31 Dec 2020 11:27:53 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2020-12-31-back_tracking/</guid><description>백트래킹 일반적으로 DFS나 BFS를 사용하여 탐색을 수행하면 모든 노드들을 탐색한다. 모든 노드를 탐색해야만하는 상황이라면 이러한 완전탐색(Full-Access) 방법을 취하는 것은 적절하다. 하지만, 모든 노드 중 특정 조건이 성립하는 노드만을 탐색하길 원한다면 DFS나 BFS는 목표하지 않은 경로도 탐색하게되므로 비효율적인 결과를 발생시킬수 있다.
백트래킹을 적용하면 유망성 검사를 통해 모든 노드를 탐색하는 것이 아닌 조건에 부합하지 않는 노드들은 배제를 시킨다.</description></item></channel></rss>