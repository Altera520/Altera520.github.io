<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>OOP - Category - altera520 Blog</title><link>https://altera520.github.io/categories/oop/</link><description>OOP - Category - altera520 Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 04 Mar 2021 19:19:08 +0900</lastBuildDate><atom:link href="https://altera520.github.io/categories/oop/" rel="self" type="application/rss+xml"/><item><title>객체 지향 5대 원칙 - SOLID</title><link>https://altera520.github.io/posts/2021-03-04-solid/</link><pubDate>Thu, 04 Mar 2021 19:19:08 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-03-04-solid/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/2021-03-04-solid/srp-1.png" referrerpolicy="no-referrer">
&lt;/div>SOLID란? OOP에서 클래스 안의 응집도(Cohesion)는 높이고 타 클래스 간의 결합도(Coupling)는 낮추는 관점에서 정립된 원칙을 말한다.
SOLID 원칙에 기반하여 소프트웨어를 개발하면 소프트웨어 내부 컴포넌트들은 재사용성이 높아지고 수정이 최소화되기 때문에 보다 유지보수하기 쉽고, 유현하고, 확장이 용이해진다.
SRP 정의 단일책임 원칙이란 클래스는 단 하나의 책임을 가져야하며, 클래스를 변경하는 이유는 단 하나의 이유여야 한다는 원칙이다.</description></item><item><title>싱글턴(Singleton)</title><link>https://altera520.github.io/posts/2021-01-06-singleton/</link><pubDate>Wed, 06 Jan 2021 16:00:13 +0900</pubDate><author>Author</author><guid>https://altera520.github.io/posts/2021-01-06-singleton/</guid><description>싱글턴 정의 GoF 디자인 패턴에서 생성 패턴으로 분류된다. 클래스에 대한 인스턴스가 오직 1개만 생성되어야 하는 경우에 사용하는 패턴이다.
다중 스레드 환경이라면 싱글턴을 설계할 때 동시성(concurrency) 을 필히 고려하여 Thread-safe하게 만들어야한다. 다중 스레드 환경에서 동시성을 고려하지않고 싱글턴 클래스를 설계하면 인스턴스가 2개이상 생성될 수 있기에 예기치 못한 동작을 일으킬 수 있다.
싱글턴 패턴 구현 방식 Thread-safe한 구현방식에는 차이가 있어도 private constructor와 static method를 사용하는 것은 공통이다.</description></item></channel></rss>